FROM php:7.3.17-fpm-buster as magento2_deps
#FROM debian:buster as magento2_deps
ARG MAGENTO_TIMEZONE=America/Los_Angeles
ARG MAGENTO_PHP_MEMORYLIMIT=2G

ENV APACHE_CONFDIR /etc/apache2
ENV APACHE_ENVVARS $APACHE_CONFDIR/envvars

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        #nginx \
        apache2 \
        unzip \
        wget && \
#        php \
#        php-common \
#        php-fpm \
#        php-bcmath \
#        php-curl \
#        php-gd \
#        php-iconv \
#        php-intl \
#        php-json \
#        php-mbstring \
#        php-opcache \
#        php-pdo-mysql \
#        php-soap \
#        php-xsl \
#        php-zip && \
    wget --output-document=/usr/local/bin/install-php-extensions https://raw.githubusercontent.com/mlocati/docker-php-extension-installer/master/install-php-extensions && \
    chmod uga+x /usr/local/bin/install-php-extensions && \
    sync && \
    install-php-extensions bcmath gd intl opcache pdo_mysql soap sockets xsl zip && \
    mv /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini && \
    sed -i -e 's@;date\.timezone =@date.timezone = '"${MAGENTO_TIMEZONE}"'@g' \
        -e 's@^;opcache.save_comments.*$@opcache.save_comments=1@g' \
        -e 's@^memory_limit.*$@memory_limit='"$MAGENTO_PHP_MEMORYLIMIT"'@g' /usr/local/etc/php/php.ini && \
    # Disable PHP-FPM access log
    sed -i -e 's/access.log/;access.log/g' /usr/local/etc/php-fpm.d/docker.conf && \
    #sed -i -e 's/listen/;listen/g' /usr/local/etc/php-fpm.d/zz-docker.conf \
    wget --output-document=/etc/ssl/certs/BaltimoreCyberTrustRoot.crt.pem https://www.digicert.com/CACerts/BaltimoreCyberTrustRoot.crt.pem

# Since the above takes so long, we'll put two RUN directives for now
# TODO - Remove this later

# Taken from https://github.com/docker-library/php/blob/master/7.3/buster/apache/Dockerfile
# generically convert lines like
#   export APACHE_RUN_USER=www-data
# into
#   : ${APACHE_RUN_USER:=www-data}
#   export APACHE_RUN_USER
# so that they can be overridden at runtime ("-e APACHE_RUN_USER=...")
RUN	sed -ri 's/^export ([^=]+)=(.*)$/: ${\1:=\2}\nexport \1/' "$APACHE_ENVVARS"; \
	\
# setup directories and permissions
	. "$APACHE_ENVVARS"; \
	for dir in \
		"$APACHE_LOCK_DIR" \
		"$APACHE_RUN_DIR" \
		"$APACHE_LOG_DIR" \
	; do \
		rm -rvf "$dir"; \
		mkdir -p "$dir"; \
		chown "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$dir"; \
# allow running as an arbitrary user (https://github.com/docker-library/php/issues/743)
		chmod 777 "$dir"; \
	done; \
	\
# delete the "index.html" that installing Apache drops in here
	rm -rvf /var/www/html/*; \
	\
# logs should go to stdout / stderr
	ln -sfT /dev/stderr "$APACHE_LOG_DIR/error.log"; \
	ln -sfT /dev/stdout "$APACHE_LOG_DIR/access.log"; \
	ln -sfT /dev/stdout "$APACHE_LOG_DIR/other_vhosts_access.log"; \
	chown -R --no-dereference "$APACHE_RUN_USER:$APACHE_RUN_GROUP" "$APACHE_LOG_DIR"; \
# Apache + PHP + FPM requires mpm_event and rewrite, and disabling of preforking Apache for best results
a2dismod mpm_prefork; \
a2enmod headers mpm_event proxy proxy_fcgi rewrite; \
sed -i -e 's/Listen 80/Listen 8080/g' /etc/apache2/ports.conf; \
#sed -i -e 's/catch_workers_output/;catch_workers_output/g' /usr/local/etc/php-fpm.d/docker.conf; \
#sed -i -e 's/access.log/;access.log/g' /usr/local/etc/php-fpm.d/docker.conf; \
#sed -i -e 's/pm = dynamic/pm = static/g' /usr/local/etc/php-fpm.d/www.conf; \
#sed -i -e 's/pm.max_children = 5/pm.max_children = 10/g' /usr/local/etc/php-fpm.d/www.conf; \
#sed -i -e 's/pm.start_servers = 2/pm.start_servers = 5/g' /usr/local/etc/php-fpm.d/www.conf; \
#sed -i -e 's/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g' /usr/local/etc/php-fpm.d/www.conf; \
#sed -i -e 's/pm.max_spare_servers = 3/pm.max_spare_servers = 5/g' /usr/local/etc/php-fpm.d/www.conf; \
#sed -i -e 's/;pm.max_requests = 500/pm.max_requests = 1000/g' /usr/local/etc/php-fpm.d/www.conf; \
#sed -i -e 's/;log_level = notice/log_level = warning/g' /usr/local/etc/php-fpm.d/www.conf; \
# # Remove default index.html
# rm /var/www/html/index.html; \
# Remove default site \
#rm /etc/apache2/sites-enabled/000-default.conf; \
#rm /etc/apache2/sites-available/000-default.conf; \
#rm /etc/apache2/sites-available/default-ssl.conf; \
#rm /etc/apache2/conf-available/other-vhosts-access-log.conf; \
#rm /var/log/apache2/access.log; \
#rm /var/log/apache2/other_vhosts_access.log; \
#echo 'CustomLog /dev/null common' >> /etc/apache2/apache2.conf; \
useradd --create-home --shell /bin/bash --gid www-data magento; \
# Set permissions for apache
    chown -R www-data:www-data /var/www && \
    chmod go-rwx /var/www && \
    chmod go+x /var/www && \
    chgrp -R www-data /var/www && \
    chmod -R go-rwx /var/www && \
    chmod -R g+rx /var/www && \
    chmod -R g+rwx /var/www

FROM magento2_deps as builder
COPY .env_build /magento/.env
COPY download-magento.sh /magento/download-magento.sh
COPY install-composer.sh /magento/install-composer.sh
COPY magento.conf /etc/apache2/sites-available/magento.conf

# Normally, we should probably combine these steps to reduce the number of layers.
# However, each of these steps can fail for various reasons, so we don't want to have
# to keep running the whole thing.

#COPY magento-ce-2.3.5-p1_sample_data-2020-04-24-10-29-49.tar.gz /var/www/html/magento2/magento-ce-2.3.5-p1_sample_data-2020-04-24-10-29-49.tar.gz
COPY magento-ce-2.3.5-p1-2020-04-24-08-46-10.tar.gz /var/www/html/magento2/magento-ce-2.3.5-p1-2020-04-24-08-46-10.tar.gz
# We need to alter the php execution time because installing the sample data can take a long time.
# We just need to make sure to reset it.
#RUN sh -c /magento/install-composer.sh && \
#    rm /magento/install-composer.sh && \
RUN chown -R magento:www-data /var/www/html/magento2 && \
    chmod uga+x /magento/install-composer.sh && \
    sync && \
    /magento/install-composer.sh && \
    sed -i -e 's@^max_execution_time.*$@max_execution_time = 1200@g' /usr/local/etc/php/php.ini && \
    su - magento -c 'set -a; . /magento/.env; set +a; /magento/download-magento.sh' && \
    sed -i -e 's@^max_execution_time.*$@max_execution_time = 30@g' /usr/local/etc/php/php.ini && \
    # Setup the apache config
    ln -s /etc/apache2/sites-available/magento.conf /etc/apache2/sites-enabled/magento2.conf
COPY install-magento.sh /magento/install-magento.sh
RUN su - magento -c 'set -a; . /magento/.env; set +a; /magento/install-magento.sh'
COPY configure-magento.sh /magento/configure-magento.sh
RUN su - magento -c 'set -a; . /magento/.env; set +a; /magento/configure-magento.sh'

COPY apache2-foreground /usr/local/bin/
WORKDIR /var/www/html

# RUN apt-get update && \
#     DEBIAN_FRONTEND=noninteractive apt-get -y install gnupg2 && \
#     echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list && \
#     wget -O- https://download.newrelic.com/548C16BF.gpg | apt-key add - && \
#     apt-get update && \
#     echo newrelic-php5 newrelic-php5/application-name string "magentoweb" | debconf-set-selections && \
#     echo newrelic-php5 newrelic-php5/license-key string "4323b2b25177ca4d39c1543ce3e2fd83cb48NRAL" | debconf-set-selections && \
#     DEBIAN_FRONTEND=noninteractive apt-get -y install newrelic-php5

#EXPOSE 80
CMD ["apache2-foreground"]
